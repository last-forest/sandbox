プロジェクト作成
rails new プロジェクト名

サーバー立ち上げる
rails s

モデル作成
rails g model モデル名(大文字単数) 属性名(stringsとか)

コントローラー作成
rails g controller コントローラー名(大文字複数数) 属性名(同上)

未実行のマイグレーション(データ等の移行)の実行
rake db:migrate

今使ってるdbにアクセスできる
rails db 
rails console

p = Project.new(title:"p1") オブジェクト作成
Project.create(title:"p2") newとsaveを一緒にやってくれる
p.save 保存
p 実際にみれる
Project.all 全部みれる
quitでぬける

routesの確認
rake routes

viewの名前はdef indexだったらindex.html.erb

rubyの制御構造は<% %>で囲む
<%= %>内容評価と表示

リンクを形成する
link_to リンク名　リンク先

rootを変える
rputes.rbで root 'project#index'

headerの中身はviewのlayoutのapplication.html.erbに書いている

routesのPrefixの項目に_pathをつけるとURI Patternに変換できる

controllerのparamsでroutesのURIをとることができる
モデル.find(引数)

perimit(filters)
filtersで指定されたキーのみを含む新しいパラメータを返し、そのパラメータのpermittedの値をtrueにする

validates
検証
validates(検証するフィールド名, :presence: true)あるかないかの制御

render
指定したRHTMLを返す
RHTMLはrubyで使用するテンプレートファイルにつけられる拡張子

obj.inspect
オブジェクトをわかりやすい表示にしてくれる

コメントアウト
=begin =end で囲む
viewの場合は<!---->や#を使用

モデル.find(引数とか)
取得

before_action :set_something, only: [:show, :new, :create, :edit, :update, :destroy]
コンストラクタみたいなもの onlyでメソッド指定

rails g model Task title done:boolean project:references
referencesはprojectにひも付け関連づけを行うことができる

modelの所有
Supplier が has_one を使用し、 Account が belongs_to
belongs_to を使うのが所有される立場のオブジェクト、 has_many を使うのが幾つかオブジェクトを持つ側になります。

only 作成されるurlをしぼりこむ

汎用的なフォームを作成
form_for(モデルオブジェクト [, オプション]) do |f|
end

build モデルオブジェクトを作成する
モデル.build([属性])







